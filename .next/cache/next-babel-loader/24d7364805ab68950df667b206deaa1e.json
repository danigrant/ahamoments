{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\n/*\n  This file contains firebase config and instantiation\n  contains functions that interact with the db\n\n  This file also holds all of the auth functions\n  logUserIn\n  getLoggedInUser <-- returns false if no user logged in\n*/\n// initialize\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\nconsole.log(firebaseConfig.apiKey);\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations');\nconst usersRef = db.collection('users');\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1);\nconst provider = new firebase.auth.TwitterAuthProvider(); // auth\n\nasync function getLoggedInUser() {\n  let user = firebase.auth().currentUser;\n\n  if (!user) {\n    // No user is signed in.\n    return false;\n  } // maybe pull some stuff about the user into an obj and return that?\n  // user.photoURL, user.displayName\n\n\n  return user;\n}\n\nasync function logUserIn() {\n  firebase.auth().signInWithPopup(provider).then(function (result) {\n    // This gives you a the Twitter OAuth 1.0 Access Token and Secret.\n    // You can use these server side with your app's credentials to access the Twitter API.\n    let token = result.credential.accessToken;\n    let secret = result.credential.secret; // The signed-in user info.\n\n    let user = result.user; // can use the getLoggedInUser function to return a good user obj\n    // user.photoURL, user.displayName, user.email, user.uid does not return twitter handle\n\n    console.log(user);\n    return user;\n  }).catch(function (error) {\n    // Handle Errors here.\n    let errorCode = error.code;\n    let errorMessage = error.message; // The email of the user's account used.\n\n    let email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n    let credential = error.credential;\n    console.log(error);\n  });\n}\n\nasync function pollForAuthChanges() {\n  firebase.auth().onAuthStateChanged(function (user) {\n    if (user) {\n      // User is signed in.\n      let displayName = user.displayName;\n      let email = user.email;\n      let emailVerified = user.emailVerified;\n      let photoURL = user.photoURL;\n      let isAnonymous = user.isAnonymous;\n      let uid = user.uid;\n      let providerData = user.providerData; // ...\n    } else {// User is signed out.\n        // ...\n      }\n  });\n}\n\nmodule.exports = {\n  logUserIn,\n  getLoggedInUser,\n  pollForAuthChanges\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/ahamoments/utils/firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","console","log","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","explanationsRef","usersRef","increment","FieldValue","decrement","provider","auth","TwitterAuthProvider","getLoggedInUser","user","currentUser","logUserIn","signInWithPopup","then","result","token","credential","accessToken","secret","catch","error","errorCode","code","errorMessage","message","email","pollForAuthChanges","onAuthStateChanged","displayName","emailVerified","photoURL","isAnonymous","uid","providerData","module","exports"],"mappings":"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","sourcesContent":["/*\n  This file contains firebase config and instantiation\n  contains functions that interact with the db\n\n  This file also holds all of the auth functions\n  logUserIn\n  getLoggedInUser <-- returns false if no user logged in\n*/\n\nimport * as firebase from 'firebase';\n\n// initialize\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n}\n\nconsole.log(firebaseConfig.apiKey);\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\nconst usersRef = db.collection('users')\n\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1);\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// auth\n\nasync function getLoggedInUser() {\n  let user = firebase.auth().currentUser\n\n  if (!user) {\n  // No user is signed in.\n    return false;\n  }\n\n  // maybe pull some stuff about the user into an obj and return that?\n  // user.photoURL, user.displayName\n\n  return user\n}\n\nasync function logUserIn() {\n  firebase.auth().signInWithPopup(provider).then(function(result) {\n    // This gives you a the Twitter OAuth 1.0 Access Token and Secret.\n    // You can use these server side with your app's credentials to access the Twitter API.\n    let token = result.credential.accessToken;\n    let secret = result.credential.secret;\n    // The signed-in user info.\n    let user = result.user;\n    // can use the getLoggedInUser function to return a good user obj\n\n    // user.photoURL, user.displayName, user.email, user.uid does not return twitter handle\n    console.log(user);\n    return user\n  }).catch(function(error) {\n    // Handle Errors here.\n    let errorCode = error.code;\n    let errorMessage = error.message;\n    // The email of the user's account used.\n    let email = error.email;\n    // The firebase.auth.AuthCredential type that was used.\n    let credential = error.credential;\n    console.log(error);\n  });\n}\n\nasync function pollForAuthChanges() {\n  firebase.auth().onAuthStateChanged(function(user) {\n    if (user) {\n      // User is signed in.\n      let displayName = user.displayName;\n      let email = user.email;\n      let emailVerified = user.emailVerified;\n      let photoURL = user.photoURL;\n      let isAnonymous = user.isAnonymous;\n      let uid = user.uid;\n      let providerData = user.providerData;\n      // ...\n    } else {\n      // User is signed out.\n      // ...\n    }\n  });\n}\n\nmodule.exports = { logUserIn, getLoggedInUser, pollForAuthChanges }\n"]},"metadata":{},"sourceType":"script"}