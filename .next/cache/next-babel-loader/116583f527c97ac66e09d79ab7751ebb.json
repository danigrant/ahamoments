{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\n/*\n  This file contains firebase config and instantiation\n  contains functions that interact with the db\n\n  This file also holds all of the auth functions\n  logUserIn\n  getLoggedInUser <-- returns false if no user logged in\n*/\n// initialize\nvar firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar db = firebase.firestore();\nvar conceptsRef = db.collection('concepts');\nvar explanationsRef = db.collection('explanations');\nvar usersRef = db.collection('users');\nvar increment = firebase.firestore.FieldValue.increment(1);\nvar decrement = firebase.firestore.FieldValue.increment(-1);\nvar provider = new firebase.auth.TwitterAuthProvider(); // auth\n\nfunction saveUserToDB(_x, _x2, _x3, _x4) {\n  return _saveUserToDB.apply(this, arguments);\n}\n\nfunction _saveUserToDB() {\n  _saveUserToDB = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee(displayName, email, photoURL, uid) {\n    var snapshot, newUser;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return usersRef.where('email', '==', email).get();\n\n          case 2:\n            snapshot = _context.sent;\n\n            // only add user to db if the user is new\n            if (snapshot.empty) {\n              newUser = {\n                \"avatarUrl\": photoURL,\n                \"displayName\": displayName,\n                \"email\": email,\n                \"userID\": uid\n              };\n              usersRef.add(newUser);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _saveUserToDB.apply(this, arguments);\n}\n\nfunction getLoggedInUser() {\n  return _getLoggedInUser.apply(this, arguments);\n}\n\nfunction _getLoggedInUser() {\n  _getLoggedInUser = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee2() {\n    var user;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            user = firebase.auth().currentUser;\n\n            if (user) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 3:\n            return _context2.abrupt(\"return\", {\n              \"displayName\": \"Barack Obama\",\n              \"userID\": \"MGIVZ1AERHSlK3eojuKUkaverHw1\",\n              \"avatarUrl\": \"/images/temp-avatar.jpg\",\n              \"ahaMomentCount\": 4,\n              \"explanationCount\": 5,\n              \"reactionsCount\": {\n                \"gotIt\": 1,\n                \"laughing\": 2,\n                \"shocked\": 3\n              }\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getLoggedInUser.apply(this, arguments);\n}\n\nfunction logUserIn() {\n  return _logUserIn.apply(this, arguments);\n} // various utils\n\n\nfunction _logUserIn() {\n  _logUserIn = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee3() {\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            firebase.auth().signInWithPopup(provider).then(function (result) {\n              // This gives you a the Twitter OAuth 1.0 Access Token and Secret.\n              // You can use these server side with your app's credentials to access the Twitter API.\n              var token = result.credential.accessToken;\n              var secret = result.credential.secret; // The signed-in user info.\n\n              var user = result.user; // can use the getLoggedInUser function to return a good user obj\n              // user.photoURL, user.displayName, user.email, user.uid does not return twitter handle\n\n              console.log(user);\n              return user;\n            })[\"catch\"](function (error) {\n              // Handle Errors here.\n              var errorCode = error.code;\n              var errorMessage = error.message; // The email of the user's account used.\n\n              var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n              var credential = error.credential;\n              console.log(error);\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _logUserIn.apply(this, arguments);\n}\n\nfunction getUserByID(_x5) {\n  return _getUserByID.apply(this, arguments);\n} // get and return various data\n\n\nfunction _getUserByID() {\n  _getUserByID = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee4(userID) {\n    var snapshot, data, explanationSnapshot;\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return usersRef.where('userID', '==', userID).get();\n\n          case 2:\n            snapshot = _context4.sent;\n            data = {};\n            _context4.next = 6;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data = {\n                \"displayName\": docData.displayName,\n                \"userID\": docData.userID,\n                \"avatarUrl\": docData.avatarUrl,\n                \"ahaMomentCount\": docData.ahaMomentCount,\n                \"explanationCount\": docData.explanationCount,\n                \"reactionsCount\": {\n                  \"gotIt\": docData.reactionGotItCount,\n                  \"laughing\": docData.reactionLaughingCount,\n                  \"shocked\": docData.reactionShockedCount\n                },\n                explanations: []\n              };\n            });\n\n          case 6:\n            _context4.next = 8;\n            return explanationsRef.where('authorUserID', '==', userID).get();\n\n          case 8:\n            explanationSnapshot = _context4.sent;\n            _context4.next = 11;\n            return explanationSnapshot.forEach(function (doc) {\n              var explanationDocData = doc.data();\n              data.explanations.push({\n                \"explanationID\": doc.id,\n                \"concept\": explanationDocData.concept,\n                \"authorUserID\": explanationDocData.authorUserID,\n                \"authorAvatarUrl\": explanationDocData.authorAvatarUrl,\n                \"authorDisplayName\": explanationDocData.authorDisplayName,\n                \"explanation\": {\n                  \"type\": explanationDocData.explanation.type,\n                  \"introText\": explanationDocData.explanation.introText,\n                  \"mediaLink\": explanationDocData.explanation.mediaLink,\n                  \"mediaConsumptionGuidance\": explanationDocData.explanation.mediaConsumptionGuidance\n                }\n              });\n            });\n\n          case 11:\n            return _context4.abrupt(\"return\", data);\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getUserByID.apply(this, arguments);\n}\n\nfunction saveExplanationToDB() {\n  return _saveExplanationToDB.apply(this, arguments);\n} // returns 2 concepts for the front page that need love as an obj\n\n\nfunction _saveExplanationToDB() {\n  _saveExplanationToDB = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee5() {\n    return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _saveExplanationToDB.apply(this, arguments);\n}\n\nfunction getConceptsThatNeedLove() {\n  return _getConceptsThatNeedLove.apply(this, arguments);\n} // returns top 5 creators in an array\n\n\nfunction _getConceptsThatNeedLove() {\n  _getConceptsThatNeedLove = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee6() {\n    return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", {\n              \"totalAmountOfConceptsNeedingLove\": 43,\n              \"conceptsNeedingLoveToDisplay\": [{\n                \"conceptName\": \"Derivative\",\n                \"numContributors\": 11,\n                \"contributorAvatars\": [\"/images/temp-avatar.jpg\", \"/images/temp-avatar2.jpg\", \"/images/temp-avatar3.jpg\", \"/images/temp-avatar4.jpg\"]\n              }, {\n                \"conceptName\": \"Limits\",\n                \"numContributors\": 4,\n                \"contributorAvatars\": [\"/images/temp-avatar.jpg\", \"/images/temp-avatar2.jpg\", \"/images/temp-avatar3.jpg\", \"/images/temp-avatar4.jpg\"]\n              }]\n            });\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getConceptsThatNeedLove.apply(this, arguments);\n}\n\nfunction getTopCreatorsAllTime() {\n  return _getTopCreatorsAllTime.apply(this, arguments);\n} // returns array of top 5 explanations\n\n\nfunction _getTopCreatorsAllTime() {\n  _getTopCreatorsAllTime = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee7() {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return usersRef.get();\n\n          case 2:\n            snapshot = _context7.sent;\n            //.orderBy('score', 'desc').get() <-- need to do this when i have more than one concept to order by\n            data = [];\n            _context7.next = 6;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.push({\n                \"displayName\": docData.displayName,\n                \"userID\": docData.userID,\n                \"avatarUrl\": docData.avatarUrl,\n                \"ahaMomentCount\": docData.ahaMomentCount,\n                \"explanationCount\": docData.explanationCount,\n                \"reactions\": {\n                  \"gotItCount\": docData.reactionGotItCount,\n                  \"laughingCount\": docData.reactionLaughingCount,\n                  \"shockedCount\": docData.reactionShockedCount\n                }\n              });\n            });\n\n          case 6:\n            return _context7.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getTopCreatorsAllTime.apply(this, arguments);\n}\n\nfunction getTopExplanationsAllTime() {\n  return _getTopExplanationsAllTime.apply(this, arguments);\n}\n\nfunction _getTopExplanationsAllTime() {\n  _getTopExplanationsAllTime = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee8() {\n    var snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return explanationsRef.get();\n\n          case 2:\n            snapshot = _context8.sent;\n            //.orderBy('score', 'desc').get() <-- need to do this when i have more than one concept to order by\n            data = [];\n            _context8.next = 6;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.push({\n                \"explanationID\": doc.id,\n                \"concept\": docData.concept,\n                \"authorUserID\": docData.authorUserID,\n                \"authorAvatarUrl\": docData.authorAvatarUrl,\n                \"authorDisplayName\": docData.authorDisplayName,\n                \"explanation\": {\n                  \"type\": docData.explanation.type,\n                  \"introText\": docData.explanation.introText,\n                  \"mediaLink\": docData.explanation.mediaLink,\n                  \"mediaConsumptionGuidance\": docData.explanation.mediaConsumptionGuidance\n                },\n                \"ahaMomentCount\": docData.ahaMomentCount,\n                \"totalScore\": docData.totalScore,\n                \"reactions\": {\n                  \"gotItCount\": docData.reactionGotItCount,\n                  \"laughingCount\": docData.reactionLaughingCount,\n                  \"shockedCount\": docData.reactionShockedCount\n                }\n              });\n            });\n\n          case 6:\n            return _context8.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _getTopExplanationsAllTime.apply(this, arguments);\n}\n\nfunction getTopConceptsAllTime() {\n  return _getTopConceptsAllTime.apply(this, arguments);\n} // returns array of explanations for a concept sorted in rank order\n\n\nfunction _getTopConceptsAllTime() {\n  _getTopConceptsAllTime = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee9() {\n    return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            return _context9.abrupt(\"return\", [{\n              \"conceptName\": \"Integrals\",\n              // these need to be transformed into - instead of space\n              \"explanationCount\": 10,\n              \"ahaMomentCount\": 20\n            }, {\n              \"conceptName\": \"Derivatives\",\n              // these need to be transformed into - instead of space\n              \"explanationCount\": 10,\n              \"ahaMomentCount\": 20\n            }, {\n              \"conceptName\": \"Limits\",\n              // these need to be transformed into - instead of space\n              \"explanationCount\": 10,\n              \"ahaMomentCount\": 20\n            }, {\n              \"conceptName\": \"Infinity\",\n              // these need to be transformed into - instead of space\n              \"explanationCount\": 10,\n              \"ahaMomentCount\": 20\n            }, {\n              \"conceptName\": \"Logarithm\",\n              // these need to be transformed into - instead of space\n              \"explanationCount\": 10,\n              \"ahaMomentCount\": 20\n            }]);\n\n          case 1:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _getTopConceptsAllTime.apply(this, arguments);\n}\n\nfunction getConceptExplanations(_x6) {\n  return _getConceptExplanations.apply(this, arguments);\n}\n\nfunction _getConceptExplanations() {\n  _getConceptExplanations = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee10(concept) {\n    var formattedConcept, snapshot, data;\n    return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            formattedConcept = concept.toLowerCase();\n            _context10.next = 3;\n            return explanationsRef.where('concept', '==', formattedConcept).get();\n\n          case 3:\n            snapshot = _context10.sent;\n            //.orderBy('score', 'desc').get()\n            data = [];\n            _context10.next = 7;\n            return snapshot.forEach(function (doc) {\n              var docData = doc.data();\n              data.push({\n                \"explanationID\": doc.id,\n                \"concept\": docData.concept,\n                \"authorUserID\": docData.authorUserID,\n                \"authorAvatarUrl\": docData.authorAvatarUrl,\n                \"authorDisplayName\": docData.authorDisplayName,\n                \"explanation\": {\n                  \"type\": docData.explanation.type,\n                  \"introText\": docData.explanation.introText,\n                  \"mediaLink\": docData.explanation.mediaLink,\n                  \"mediaConsumptionGuidance\": docData.explanation.mediaConsumptionGuidance\n                },\n                \"ahaMomentCount\": docData.ahaMomentCount,\n                \"totalScore\": docData.totalScore,\n                \"reactions\": {\n                  \"gotItCount\": docData.reactionGotItCount,\n                  \"laughingCount\": docData.reactionLaughingCount,\n                  \"shockedCount\": docData.reactionShockedCount\n                }\n              });\n            });\n\n          case 7:\n            return _context10.abrupt(\"return\", data);\n\n          case 8:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _getConceptExplanations.apply(this, arguments);\n}\n\nmodule.exports = {\n  firebase: firebase,\n  logUserIn: logUserIn,\n  saveUserToDB: saveUserToDB,\n  getLoggedInUser: getLoggedInUser,\n  getUserByID: getUserByID,\n  saveExplanationToDB: saveExplanationToDB,\n  getTopConceptsAllTime: getTopConceptsAllTime,\n  getTopCreatorsAllTime: getTopCreatorsAllTime,\n  getTopExplanationsAllTime: getTopExplanationsAllTime,\n  getConceptsThatNeedLove: getConceptsThatNeedLove,\n  getConceptExplanations: getConceptExplanations\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/ahamoments/utils/firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","explanationsRef","usersRef","increment","FieldValue","decrement","provider","auth","TwitterAuthProvider","saveUserToDB","displayName","email","photoURL","uid","where","get","snapshot","empty","newUser","add","getLoggedInUser","user","currentUser","logUserIn","signInWithPopup","then","result","token","credential","accessToken","secret","console","log","error","errorCode","code","errorMessage","message","getUserByID","userID","data","forEach","doc","docData","avatarUrl","ahaMomentCount","explanationCount","reactionGotItCount","reactionLaughingCount","reactionShockedCount","explanations","explanationSnapshot","explanationDocData","push","id","concept","authorUserID","authorAvatarUrl","authorDisplayName","explanation","type","introText","mediaLink","mediaConsumptionGuidance","saveExplanationToDB","getConceptsThatNeedLove","getTopCreatorsAllTime","getTopExplanationsAllTime","totalScore","getTopConceptsAllTime","getConceptExplanations","formattedConcept","toLowerCase","module","exports"],"mappings":"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","sourcesContent":["/*\n  This file contains firebase config and instantiation\n  contains functions that interact with the db\n\n  This file also holds all of the auth functions\n  logUserIn\n  getLoggedInUser <-- returns false if no user logged in\n*/\n\nimport * as firebase from 'firebase';\n\n// initialize\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n}\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\nconst usersRef = db.collection('users')\n\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1);\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// auth\n\nasync function saveUserToDB(displayName, email, photoURL, uid) {\n  // first check if this a new user?\n  let snapshot = await usersRef.where('email', '==', email).get()\n  // only add user to db if the user is new\n  if (snapshot.empty) {\n    let newUser = {\n      \"avatarUrl\": photoURL,\n      \"displayName\": displayName,\n      \"email\": email,\n      \"userID\": uid\n    }\n\n    usersRef.add(newUser)\n  }\n}\n\nasync function getLoggedInUser() {\n  let user = firebase.auth().currentUser\n\n  if (!user) {\n  // No user is signed in.\n    return false;\n  }\n\n  return {\n    \"displayName\": \"Barack Obama\",\n\t\t\"userID\": \"MGIVZ1AERHSlK3eojuKUkaverHw1\",\n\t\t\"avatarUrl\": \"/images/temp-avatar.jpg\",\n\t\t\"ahaMomentCount\": 4,\n\t\t\"explanationCount\": 5,\n\t\t\"reactionsCount\": {\n\t\t\t\"gotIt\": 1,\n\t\t\t\"laughing\": 2,\n\t\t\t\"shocked\": 3\n\t\t}\n  }\n\n  // maybe pull some stuff about the user into an obj and return that?\n  // user.photoURL, user.displayName\n}\n\nasync function logUserIn() {\n  firebase.auth().signInWithPopup(provider).then(function(result) {\n    // This gives you a the Twitter OAuth 1.0 Access Token and Secret.\n    // You can use these server side with your app's credentials to access the Twitter API.\n    let token = result.credential.accessToken;\n    let secret = result.credential.secret;\n    // The signed-in user info.\n    let user = result.user;\n    // can use the getLoggedInUser function to return a good user obj\n\n    // user.photoURL, user.displayName, user.email, user.uid does not return twitter handle\n    console.log(user);\n    return user\n  }).catch(function(error) {\n    // Handle Errors here.\n    let errorCode = error.code;\n    let errorMessage = error.message;\n    // The email of the user's account used.\n    let email = error.email;\n    // The firebase.auth.AuthCredential type that was used.\n    let credential = error.credential;\n    console.log(error);\n  });\n}\n\n// various utils\n\nasync function getUserByID(userID) {\n  // first get metadata\n  let snapshot = await usersRef.where('userID', '==', userID).get()\n  let data = {}\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data = {\n      \"displayName\": docData.displayName,\n  \t\t\"userID\": docData.userID,\n  \t\t\"avatarUrl\": docData.avatarUrl,\n  \t\t\"ahaMomentCount\": docData.ahaMomentCount,\n  \t\t\"explanationCount\": docData.explanationCount,\n  \t\t\"reactionsCount\": {\n  \t\t\t\"gotIt\": docData.reactionGotItCount,\n  \t\t\t\"laughing\": docData.reactionLaughingCount,\n  \t\t\t\"shocked\": docData.reactionShockedCount\n  \t\t},\n      explanations: []\n    }\n  })\n  // then get explanations\n  let explanationSnapshot = await explanationsRef.where('authorUserID', '==', userID).get() //.orderBy('score', 'desc').get()\n  await explanationSnapshot.forEach(doc => {\n    let explanationDocData = doc.data()\n    data.explanations.push({\n      \"explanationID\": doc.id,\n      \"concept\": explanationDocData.concept,\n  \t\t\"authorUserID\": explanationDocData.authorUserID,\n      \"authorAvatarUrl\": explanationDocData.authorAvatarUrl,\n      \"authorDisplayName\": explanationDocData.authorDisplayName,\n  \t\t\"explanation\": {\n  \t\t\t\"type\": explanationDocData.explanation.type,\n  \t\t\t\"introText\": explanationDocData.explanation.introText,\n  \t\t\t\"mediaLink\": explanationDocData.explanation.mediaLink,\n  \t\t\t\"mediaConsumptionGuidance\": explanationDocData.explanation.mediaConsumptionGuidance\n  \t\t}\n  \t})\n  })\n  return data\n}\n\n// get and return various data\n\nasync function saveExplanationToDB() {\n\n}\n\n// returns 2 concepts for the front page that need love as an obj\nasync function getConceptsThatNeedLove() {\n  return {\n    \"totalAmountOfConceptsNeedingLove\": 43,\n    \"conceptsNeedingLoveToDisplay\": [\n\t\t{\n\t\t\t\"conceptName\": \"Derivative\",\n\t\t\t\"numContributors\": 11,\n\t\t\t\"contributorAvatars\": [\"/images/temp-avatar.jpg\", \"/images/temp-avatar2.jpg\", \"/images/temp-avatar3.jpg\", \"/images/temp-avatar4.jpg\"]\n\t\t},\n    {\n\t\t\t\"conceptName\": \"Limits\",\n\t\t\t\"numContributors\": 4,\n\t\t\t\"contributorAvatars\": [\"/images/temp-avatar.jpg\", \"/images/temp-avatar2.jpg\", \"/images/temp-avatar3.jpg\", \"/images/temp-avatar4.jpg\"]\n\t\t}]\n  }\n}\n\n// returns top 5 creators in an array\nasync function getTopCreatorsAllTime() {\n  let snapshot = await usersRef.get() //.orderBy('score', 'desc').get() <-- need to do this when i have more than one concept to order by\n  let data = []\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"displayName\": docData.displayName,\n      \"userID\": docData.userID,\n      \"avatarUrl\": docData.avatarUrl,\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"explanationCount\": docData.explanationCount,\n      \"reactions\": {\n        \"gotItCount\": docData.reactionGotItCount,\n        \"laughingCount\": docData.reactionLaughingCount,\n        \"shockedCount\": docData.reactionShockedCount\n      }\n    })\n  })\n  return data\n}\n\n// returns array of top 5 explanations\nasync function getTopExplanationsAllTime() {\n  let snapshot = await explanationsRef.get() //.orderBy('score', 'desc').get() <-- need to do this when i have more than one concept to order by\n  let data = []\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"explanationID\": doc.id,\n      \"concept\": docData.concept,\n      \"authorUserID\": docData.authorUserID,\n      \"authorAvatarUrl\": docData.authorAvatarUrl,\n      \"authorDisplayName\": docData.authorDisplayName,\n      \"explanation\": {\n        \"type\": docData.explanation.type,\n        \"introText\": docData.explanation.introText,\n        \"mediaLink\": docData.explanation.mediaLink,\n        \"mediaConsumptionGuidance\": docData.explanation.mediaConsumptionGuidance\n      },\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"totalScore\": docData.totalScore,\n      \"reactions\": {\n        \"gotItCount\": docData.reactionGotItCount,\n        \"laughingCount\": docData.reactionLaughingCount,\n        \"shockedCount\": docData.reactionShockedCount\n      }\n    })\n  })\n  return data\n}\n\n  async function getTopConceptsAllTime() {\n  return [\n    {\n    \t\"conceptName\": \"Integrals\", // these need to be transformed into - instead of space\n    \t\"explanationCount\": 10,\n      \"ahaMomentCount\": 20\n    },\n    {\n    \t\"conceptName\": \"Derivatives\", // these need to be transformed into - instead of space\n    \t\"explanationCount\": 10,\n      \"ahaMomentCount\": 20\n    },\n    {\n    \t\"conceptName\": \"Limits\", // these need to be transformed into - instead of space\n    \t\"explanationCount\": 10,\n      \"ahaMomentCount\": 20\n    },\n    {\n    \t\"conceptName\": \"Infinity\", // these need to be transformed into - instead of space\n    \t\"explanationCount\": 10,\n      \"ahaMomentCount\": 20\n    },\n    {\n    \t\"conceptName\": \"Logarithm\", // these need to be transformed into - instead of space\n    \t\"explanationCount\": 10,\n      \"ahaMomentCount\": 20\n    }\n  ]\n  }\n\n  // returns array of explanations for a concept sorted in rank order\n  async function getConceptExplanations(concept) {\n  let formattedConcept = concept.toLowerCase()\n  let snapshot = await explanationsRef.where('concept', '==', formattedConcept).get() //.orderBy('score', 'desc').get()\n  let data = []\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"explanationID\": doc.id,\n      \"concept\": docData.concept,\n      \"authorUserID\": docData.authorUserID,\n      \"authorAvatarUrl\": docData.authorAvatarUrl,\n      \"authorDisplayName\": docData.authorDisplayName,\n      \"explanation\": {\n        \"type\": docData.explanation.type,\n        \"introText\": docData.explanation.introText,\n        \"mediaLink\": docData.explanation.mediaLink,\n        \"mediaConsumptionGuidance\": docData.explanation.mediaConsumptionGuidance\n      },\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"totalScore\": docData.totalScore,\n      \"reactions\": {\n        \"gotItCount\": docData.reactionGotItCount,\n        \"laughingCount\": docData.reactionLaughingCount,\n        \"shockedCount\": docData.reactionShockedCount\n      }\n    })\n  })\n  return data\n}\n\nmodule.exports = {\n  firebase,\n  logUserIn,\n  saveUserToDB,\n  getLoggedInUser,\n  getUserByID,\n  saveExplanationToDB,\n  getTopConceptsAllTime,\n  getTopCreatorsAllTime,\n  getTopExplanationsAllTime,\n  getConceptsThatNeedLove,\n  getConceptExplanations,\n}\n"]},"metadata":{},"sourceType":"script"}