{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nrequire(\"firebase/storage\");\n\nvar _utils = require(\"./utils\");\n\n/*\n  This file contains firebase config and instantiation\n  contains functions that interact with the db\n\n  This file also holds all of the auth functions\n  logUserIn\n  getLoggedInUser <-- returns false if no user logged in\n*/\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations');\nconst usersRef = db.collection('users');\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1);\nconst provider = new firebase.auth.TwitterAuthProvider();\nconst storage = firebase.app().storage();\nconst storageRef = firebase.app().storage().ref(); // auth\n\nasync function saveUserToDB(displayName, email, photoURL, uid) {\n  // first check if this a new user?\n  let snapshot = await usersRef.where('email', '==', email).get(); // only add user to db if the user is new\n\n  if (snapshot.empty) {\n    let newUser = {\n      \"avatarUrl\": photoURL,\n      \"displayName\": displayName,\n      \"email\": email,\n      \"userID\": uid\n    };\n    usersRef.add(newUser);\n  }\n}\n\nasync function getLoggedInUser() {\n  let user = firebase.auth().currentUser;\n\n  if (!user) {\n    // No user is signed in.\n    return false;\n  }\n\n  return {\n    \"displayName\": \"Barack Obama\",\n    \"userID\": \"MGIVZ1AERHSlK3eojuKUkaverHw1\",\n    \"avatarUrl\": \"/images/temp-avatar.jpg\",\n    \"ahaMomentCount\": 4,\n    \"explanationCount\": 5,\n    \"reactionsCount\": {\n      \"gotIt\": 1,\n      \"laughing\": 2,\n      \"shocked\": 3\n    }\n  }; // maybe pull some stuff about the user into an obj and return that?\n  // user.photoURL, user.displayName\n}\n\nasync function logUserIn() {\n  firebase.auth().signInWithPopup(provider).then(function (result) {\n    // This gives you a the Twitter OAuth 1.0 Access Token and Secret.\n    // You can use these server side with your app's credentials to access the Twitter API.\n    let token = result.credential.accessToken;\n    let secret = result.credential.secret; // The signed-in user info.\n\n    let user = result.user; // can use the getLoggedInUser function to return a good user obj\n    // user.photoURL, user.displayName, user.email, user.uid does not return twitter handle\n\n    console.log(user);\n    return user;\n  }).catch(function (error) {\n    // Handle Errors here.\n    let errorCode = error.code;\n    let errorMessage = error.message; // The email of the user's account used.\n\n    let email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n    let credential = error.credential;\n    console.log(error);\n  });\n} // various utils\n// returns everything plus explanations\n\n\nasync function getUserByID(userID) {\n  // first get metadata\n  let snapshot = await usersRef.where('userID', '==', userID).get();\n  let data = {};\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data = {\n      \"displayName\": docData.displayName,\n      \"userID\": docData.userID,\n      \"avatarUrl\": docData.avatarUrl,\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"explanationCount\": docData.explanationCount,\n      \"reactionsCount\": {\n        \"gotIt\": docData.reactionGotItCount,\n        \"laughing\": docData.reactionLaughingCount,\n        \"shocked\": docData.reactionShockedCount\n      },\n      explanations: []\n    };\n  }); // then get explanations\n\n  let explanationSnapshot = await explanationsRef.where('authorUserID', '==', userID).orderBy('ahaMomentCount', 'desc').get();\n  await explanationSnapshot.forEach(doc => {\n    let explanationDocData = doc.data();\n    data.explanations.push({\n      \"explanationID\": doc.id,\n      \"concept\": explanationDocData.concept,\n      \"authorUserID\": explanationDocData.authorUserID,\n      \"authorAvatarUrl\": explanationDocData.authorAvatarUrl,\n      \"authorDisplayName\": explanationDocData.authorDisplayName,\n      \"explanation\": {\n        \"type\": explanationDocData.explanation.type,\n        \"introText\": explanationDocData.explanation.introText,\n        \"mediaLink\": explanationDocData.explanation.mediaLink,\n        \"mediaConsumptionGuidance\": explanationDocData.explanation.mediaConsumptionGuidance\n      }\n    });\n  });\n  return data;\n}\n\nasync function getUserProfileInfoByUserID(userID) {\n  let snapshot = await usersRef.where('userID', '==', userID).get();\n  let data = {};\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data = {\n      \"displayName\": docData.displayName,\n      \"userID\": docData.userID,\n      \"avatarUrl\": docData.avatarUrl,\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"explanationCount\": docData.explanationCount,\n      \"reactionsCount\": {\n        \"gotIt\": docData.reactionGotItCount,\n        \"laughing\": docData.reactionLaughingCount,\n        \"shocked\": docData.reactionShockedCount\n      }\n    };\n  });\n  return data;\n}\n\nasync function getDocIDByUserID(userID) {\n  let snapshot = await usersRef.where('userID', '==', userID).get();\n  let userDocID = \"\";\n  await snapshot.forEach(doc => {\n    userDocID = doc.id;\n  });\n  return userDocID;\n}\n\nasync function incrementUserExplanationCount(userID) {\n  let docID = await getDocIDByUserID(userID);\n  let userRef = usersRef.doc(docID);\n  userRef.update({\n    explanationCount: increment\n  });\n}\n\nasync function getFileURLFromFirebaseStorage(url) {\n  let downloadUrl = await storageRef.child(url).getDownloadURL();\n  return downloadUrl;\n} // get and return various data\n\n\nasync function saveExplanationToDB(explanationObj) {\n  let newExplanation = {\n    \"concept\": explanationObj.concept,\n    \"authorUserID\": explanationObj.authorUserID,\n    \"authorDisplayName\": explanationObj.authorDisplayName,\n    \"authorAvatarUrl\": explanationObj.authorAvatarUrl,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": {\n      \"introText\": explanationObj.explanation.introText ? explanationObj.explanation.introText : \"\",\n      \"mediaConsumptionGuidance\": explanationObj.explanation.mediaConsumptionGuidance ? explanationObj.explanation.mediaConsumptionGuidance : \"\",\n      \"mediaLink\": explanationObj.explanation.mediaLink ? explanationObj.explanation.mediaLink : \"\",\n      \"type\": explanationObj.explanation.type\n    },\n    \"ahaMomentCount\": 0,\n    \"explanationCount\": 0,\n    \"reactionGotItCount\": 0,\n    \"reactionLaughingCount\": 0,\n    \"reactionShockedCount\": 0\n  };\n  explanationsRef.add(newExplanation);\n  incrementUserExplanationCount(explanationObj.authorUserID);\n}\n\nasync function saveExplanationWithFileToDB(introText, fileToUpload, fileType, userID, concept) {\n  // will also want the user here\n  // first upload file to db\n  let fileName = (0, _utils.generateFilePathAndName)(fileType, userID, concept);\n  let snapshot = await storageRef.child(fileName).put(fileToUpload);\n\n  if (!snapshot.state == \"success\") {\n    console.log(\"error\");\n  } // then need to save explanation to firestore\n  // first to do that, need some user profile data\n\n\n  let userObj = await getUserProfileInfoByUserID(userID); // then save to firebase\n\n  await saveExplanationToDB({\n    \"concept\": concept,\n    \"authorUserID\": userID,\n    \"authorDisplayName\": userObj.displayName,\n    \"authorAvatarUrl\": userObj.avatarUrl,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": {\n      \"introText\": introText,\n      \"mediaLink\": snapshot.metadata.fullPath,\n      \"type\": fileType\n    },\n    \"ahaMomentCount\": 0,\n    \"explanationCount\": 0,\n    \"reactionGotItCount\": 0,\n    \"reactionLaughingCount\": 0,\n    \"reactionShockedCount\": 0\n  });\n}\n\nasync function saveWrittenExplanationToDB(text, userID, concept) {\n  // first remove any html or scripts because xss\n  let cleanText = text.replace('<script>', '').replace('onclick', '').replace('onerror').replace('onResize', '').replace('onPropertyChange', '').replace('onMouseEnter', '').replace('onFocus', ''); // https://gist.github.com/JohannesHoppe/5612274\n  // then save explanation to firestore\n  // first to do that, need some user profile data\n\n  let userObj = await getUserProfileInfoByUserID(userID); // then save to firebase\n\n  await saveExplanationToDB({\n    \"concept\": concept,\n    \"authorUserID\": userID,\n    \"authorDisplayName\": userObj.displayName,\n    \"authorAvatarUrl\": userObj.avatarUrl,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": {\n      \"introText\": text,\n      \"type\": \"text\"\n    },\n    \"ahaMomentCount\": 0,\n    \"explanationCount\": 0,\n    \"reactionGotItCount\": 0,\n    \"reactionLaughingCount\": 0,\n    \"reactionShockedCount\": 0\n  });\n}\n\nasync function saveExternalLinkExplanationToDB(introText, mediaLink, mediaConsumptionGuidance, fileType, userID, concept) {\n  // first need some user profile data\n  let userObj = await getUserProfileInfoByUserID(userID); // then save to firebase\n\n  await saveExplanationToDB({\n    \"concept\": concept,\n    \"authorUserID\": userID,\n    \"authorDisplayName\": userObj.displayName,\n    \"authorAvatarUrl\": userObj.avatarUrl,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": {\n      \"introText\": introText,\n      \"mediaLink\": mediaLink,\n      \"mediaConsumptionGuidance\": mediaConsumptionGuidance,\n      \"type\": fileType\n    },\n    \"ahaMomentCount\": 0,\n    \"explanationCount\": 0,\n    \"reactionGotItCount\": 0,\n    \"reactionLaughingCount\": 0,\n    \"reactionShockedCount\": 0\n  });\n} // returns 2 concepts for the front page that need love as an obj\n\n\nasync function getConceptsThatNeedLove() {\n  return {\n    \"totalAmountOfConceptsNeedingLove\": 43,\n    \"conceptsNeedingLoveToDisplay\": [{\n      \"conceptName\": \"Derivative\",\n      \"numContributors\": 11,\n      \"contributorAvatars\": [\"/images/temp-avatar.jpg\", \"/images/temp-avatar2.jpg\", \"/images/temp-avatar3.jpg\", \"/images/temp-avatar4.jpg\"]\n    }, {\n      \"conceptName\": \"Infinity\",\n      \"numContributors\": 4,\n      \"contributorAvatars\": [\"/images/temp-avatar.jpg\", \"/images/temp-avatar2.jpg\", \"/images/temp-avatar3.jpg\", \"/images/temp-avatar4.jpg\"]\n    }]\n  };\n} // returns top 5 creators in an array\n\n\nasync function getTopCreatorsAllTime() {\n  let snapshot = await usersRef.orderBy('ahaMomentCount', 'desc').get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.push({\n      \"displayName\": docData.displayName,\n      \"userID\": docData.userID,\n      \"avatarUrl\": docData.avatarUrl,\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"explanationCount\": docData.explanationCount,\n      \"reactions\": {\n        \"gotItCount\": docData.reactionGotItCount,\n        \"laughingCount\": docData.reactionLaughingCount,\n        \"shockedCount\": docData.reactionShockedCount\n      }\n    });\n  });\n  return data;\n} // returns array of top 5 explanations\n\n\nasync function getTopExplanationsAllTime() {\n  let snapshot = await explanationsRef.orderBy('ahaMomentCount', 'desc').get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.push({\n      \"explanationID\": doc.id,\n      \"concept\": docData.concept,\n      \"authorUserID\": docData.authorUserID,\n      \"authorAvatarUrl\": docData.authorAvatarUrl,\n      \"authorDisplayName\": docData.authorDisplayName,\n      \"explanation\": {\n        \"type\": docData.explanation.type,\n        \"introText\": docData.explanation.introText,\n        \"mediaLink\": docData.explanation.mediaLink,\n        \"mediaConsumptionGuidance\": docData.explanation.mediaConsumptionGuidance\n      },\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"totalScore\": docData.totalScore,\n      \"reactions\": {\n        \"gotItCount\": docData.reactionGotItCount,\n        \"laughingCount\": docData.reactionLaughingCount,\n        \"shockedCount\": docData.reactionShockedCount\n      }\n    });\n  });\n  return data;\n}\n\nasync function getTopConceptsAllTime() {\n  return [{\n    \"conceptName\": \"Integrals\",\n    // these need to be transformed into - instead of space\n    \"explanationCount\": 10,\n    \"ahaMomentCount\": 20\n  }, {\n    \"conceptName\": \"Derivatives\",\n    // these need to be transformed into - instead of space\n    \"explanationCount\": 10,\n    \"ahaMomentCount\": 20\n  }, {\n    \"conceptName\": \"Limits\",\n    // these need to be transformed into - instead of space\n    \"explanationCount\": 10,\n    \"ahaMomentCount\": 20\n  }, {\n    \"conceptName\": \"Infinity\",\n    // these need to be transformed into - instead of space\n    \"explanationCount\": 10,\n    \"ahaMomentCount\": 20\n  }, {\n    \"conceptName\": \"Logarithm\",\n    // these need to be transformed into - instead of space\n    \"explanationCount\": 10,\n    \"ahaMomentCount\": 20\n  }];\n} // returns array of explanations for a concept sorted in rank order\n\n\nasync function getConceptExplanations(concept) {\n  let formattedConcept = concept.toLowerCase();\n  let snapshot = await explanationsRef.where('concept', '==', formattedConcept).orderBy('ahaMomentCount', 'desc').get();\n  let data = [];\n  await snapshot.forEach(doc => {\n    let docData = doc.data();\n    data.push({\n      \"explanationID\": doc.id,\n      \"concept\": docData.concept,\n      \"authorUserID\": docData.authorUserID,\n      \"authorAvatarUrl\": docData.authorAvatarUrl,\n      \"authorDisplayName\": docData.authorDisplayName,\n      \"explanation\": {\n        \"type\": docData.explanation.type,\n        \"introText\": docData.explanation.introText,\n        \"mediaLink\": docData.explanation.mediaLink,\n        \"mediaConsumptionGuidance\": docData.explanation.mediaConsumptionGuidance\n      },\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"totalScore\": docData.totalScore,\n      \"reactions\": {\n        \"gotItCount\": docData.reactionGotItCount,\n        \"laughingCount\": docData.reactionLaughingCount,\n        \"shockedCount\": docData.reactionShockedCount\n      }\n    });\n  });\n  return data;\n} // voting utils\n\n\nasync function addAhaToDB(explanationID, loggedInUserID, authorUserID) {\n  let explanationRef = explanationsRef.doc(explanationID); // increment aha count for explanation\n\n  explanationRef.update({\n    ahaMomentCount: increment\n  }); // increment aha count for author of explanation\n\n  let docID = await getDocIDByUserID(loggedInUserID);\n  let userRef = usersRef.doc(docID);\n  userRef.update({\n    ahaMomentCount: increment\n  }); // add vote to explanation vote log\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"userID\": loggedInUserID,\n    \"type\": \"ahaMoment\"\n  };\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  });\n}\n\nasync function addDontGetItToDB(explanationID, loggedInUserID, authorUserID) {\n  let explanationRef = explanationsRef.doc(explanationID); // increment aha count for explanation\n\n  explanationRef.update({\n    dontGetItCount: increment\n  }); // increment aha count for author of explanation\n\n  let docID = await getDocIDByUserID(loggedInUserID);\n  let userRef = usersRef.doc(docID);\n  userRef.update({\n    dontGetItCount: increment\n  }); // add vote to explanation vote log\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"userID\": loggedInUserID,\n    \"type\": \"dontGetIt\"\n  };\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  });\n}\n\nasync function addReactionGotItToDB(explanationID, loggedInUserID, authorUserID) {\n  let explanationRef = explanationsRef.doc(explanationID); // increment aha count for explanation\n\n  explanationRef.update({\n    reactionGotItCount: increment\n  }); // increment aha count for author of explanation\n\n  let docID = await getDocIDByUserID(loggedInUserID);\n  let userRef = usersRef.doc(docID);\n  userRef.update({\n    reactionGotItCount: increment\n  }); // add vote to explanation vote log\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"userID\": loggedInUserID,\n    \"type\": \"reactionGotIt\"\n  };\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  });\n}\n\nasync function addReactionLaughingToDB(explanationID, loggedInUserID, authorUserID) {\n  let explanationRef = explanationsRef.doc(explanationID); // increment aha count for explanation\n\n  explanationRef.update({\n    reactionLaughingCount: increment\n  }); // increment aha count for author of explanation\n\n  let docID = await getDocIDByUserID(loggedInUserID);\n  let userRef = usersRef.doc(docID);\n  userRef.update({\n    reactionLaughingCount: increment\n  }); // add vote to explanation vote log\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"userID\": loggedInUserID,\n    \"type\": \"reactionLaughing\"\n  };\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  });\n}\n\nasync function addReactionShockedToDB(explanationID, loggedInUserID, authorUserID) {\n  let explanationRef = explanationsRef.doc(explanationID); // increment aha count for explanation\n\n  explanationRef.update({\n    reactionShockedCount: increment\n  }); // increment aha count for author of explanation\n\n  let docID = await getDocIDByUserID(loggedInUserID);\n  let userRef = usersRef.doc(docID);\n  userRef.update({\n    reactionShockedCount: increment\n  }); // add vote to explanation vote log\n\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"userID\": loggedInUserID,\n    \"type\": \"reactionShocked\"\n  };\n  explanationRef.update({\n    voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n  });\n}\n\nmodule.exports = {\n  firebase,\n  logUserIn,\n  saveUserToDB,\n  getLoggedInUser,\n  getUserByID,\n  saveExplanationWithFileToDB,\n  saveWrittenExplanationToDB,\n  saveExternalLinkExplanationToDB,\n  getFileURLFromFirebaseStorage,\n  getTopConceptsAllTime,\n  getTopCreatorsAllTime,\n  getTopExplanationsAllTime,\n  getConceptsThatNeedLove,\n  getConceptExplanations,\n  addAhaToDB,\n  addDontGetItToDB,\n  addReactionGotItToDB,\n  addReactionLaughingToDB,\n  addReactionShockedToDB\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/ahamoments/utils/firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","explanationsRef","usersRef","increment","FieldValue","decrement","provider","auth","TwitterAuthProvider","storage","app","storageRef","ref","saveUserToDB","displayName","email","photoURL","uid","snapshot","where","get","empty","newUser","add","getLoggedInUser","user","currentUser","logUserIn","signInWithPopup","then","result","token","credential","accessToken","secret","console","log","catch","error","errorCode","code","errorMessage","message","getUserByID","userID","data","forEach","doc","docData","avatarUrl","ahaMomentCount","explanationCount","reactionGotItCount","reactionLaughingCount","reactionShockedCount","explanations","explanationSnapshot","orderBy","explanationDocData","push","id","concept","authorUserID","authorAvatarUrl","authorDisplayName","explanation","type","introText","mediaLink","mediaConsumptionGuidance","getUserProfileInfoByUserID","getDocIDByUserID","userDocID","incrementUserExplanationCount","docID","userRef","update","getFileURLFromFirebaseStorage","url","downloadUrl","child","getDownloadURL","saveExplanationToDB","explanationObj","newExplanation","Timestamp","now","saveExplanationWithFileToDB","fileToUpload","fileType","fileName","put","state","userObj","metadata","fullPath","saveWrittenExplanationToDB","text","cleanText","replace","saveExternalLinkExplanationToDB","getConceptsThatNeedLove","getTopCreatorsAllTime","getTopExplanationsAllTime","totalScore","getTopConceptsAllTime","getConceptExplanations","formattedConcept","toLowerCase","addAhaToDB","explanationID","loggedInUserID","explanationRef","newVote","voteLog","arrayUnion","addDontGetItToDB","dontGetItCount","addReactionGotItToDB","addReactionLaughingToDB","addReactionShockedToDB","module","exports"],"mappings":"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","sourcesContent":["/*\n  This file contains firebase config and instantiation\n  contains functions that interact with the db\n\n  This file also holds all of the auth functions\n  logUserIn\n  getLoggedInUser <-- returns false if no user logged in\n*/\n\nimport * as firebase from 'firebase';\nimport 'firebase/storage'\nimport { generateFilePathAndName } from './utils'\n\n// initialize\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n}\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\nconst usersRef = db.collection('users')\n\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1);\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\nconst storage = firebase.app().storage();\nconst storageRef = firebase.app().storage().ref();\n\n\n// auth\n\nasync function saveUserToDB(displayName, email, photoURL, uid) {\n  // first check if this a new user?\n  let snapshot = await usersRef.where('email', '==', email).get()\n  // only add user to db if the user is new\n  if (snapshot.empty) {\n    let newUser = {\n      \"avatarUrl\": photoURL,\n      \"displayName\": displayName,\n      \"email\": email,\n      \"userID\": uid\n    }\n\n    usersRef.add(newUser)\n  }\n}\n\nasync function getLoggedInUser() {\n  let user = firebase.auth().currentUser\n\n  if (!user) {\n  // No user is signed in.\n    return false;\n  }\n\n  return {\n    \"displayName\": \"Barack Obama\",\n\t\t\"userID\": \"MGIVZ1AERHSlK3eojuKUkaverHw1\",\n\t\t\"avatarUrl\": \"/images/temp-avatar.jpg\",\n\t\t\"ahaMomentCount\": 4,\n\t\t\"explanationCount\": 5,\n\t\t\"reactionsCount\": {\n\t\t\t\"gotIt\": 1,\n\t\t\t\"laughing\": 2,\n\t\t\t\"shocked\": 3\n\t\t}\n  }\n\n  // maybe pull some stuff about the user into an obj and return that?\n  // user.photoURL, user.displayName\n}\n\nasync function logUserIn() {\n  firebase.auth().signInWithPopup(provider).then(function(result) {\n    // This gives you a the Twitter OAuth 1.0 Access Token and Secret.\n    // You can use these server side with your app's credentials to access the Twitter API.\n    let token = result.credential.accessToken;\n    let secret = result.credential.secret;\n    // The signed-in user info.\n    let user = result.user;\n    // can use the getLoggedInUser function to return a good user obj\n\n    // user.photoURL, user.displayName, user.email, user.uid does not return twitter handle\n    console.log(user);\n    return user\n  }).catch(function(error) {\n    // Handle Errors here.\n    let errorCode = error.code;\n    let errorMessage = error.message;\n    // The email of the user's account used.\n    let email = error.email;\n    // The firebase.auth.AuthCredential type that was used.\n    let credential = error.credential;\n    console.log(error);\n  });\n}\n\n// various utils\n\n// returns everything plus explanations\nasync function getUserByID(userID) {\n  // first get metadata\n  let snapshot = await usersRef.where('userID', '==', userID).get()\n  let data = {}\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data = {\n      \"displayName\": docData.displayName,\n  \t\t\"userID\": docData.userID,\n  \t\t\"avatarUrl\": docData.avatarUrl,\n  \t\t\"ahaMomentCount\": docData.ahaMomentCount,\n  \t\t\"explanationCount\": docData.explanationCount,\n  \t\t\"reactionsCount\": {\n  \t\t\t\"gotIt\": docData.reactionGotItCount,\n  \t\t\t\"laughing\": docData.reactionLaughingCount,\n  \t\t\t\"shocked\": docData.reactionShockedCount\n  \t\t},\n      explanations: []\n    }\n  })\n  // then get explanations\n  let explanationSnapshot = await explanationsRef.where('authorUserID', '==', userID).orderBy('ahaMomentCount', 'desc').get()\n  await explanationSnapshot.forEach(doc => {\n    let explanationDocData = doc.data()\n    data.explanations.push({\n      \"explanationID\": doc.id,\n      \"concept\": explanationDocData.concept,\n  \t\t\"authorUserID\": explanationDocData.authorUserID,\n      \"authorAvatarUrl\": explanationDocData.authorAvatarUrl,\n      \"authorDisplayName\": explanationDocData.authorDisplayName,\n  \t\t\"explanation\": {\n  \t\t\t\"type\": explanationDocData.explanation.type,\n  \t\t\t\"introText\": explanationDocData.explanation.introText,\n  \t\t\t\"mediaLink\": explanationDocData.explanation.mediaLink,\n  \t\t\t\"mediaConsumptionGuidance\": explanationDocData.explanation.mediaConsumptionGuidance\n  \t\t}\n  \t})\n  })\n  return data\n}\n\nasync function getUserProfileInfoByUserID(userID) {\n  let snapshot = await usersRef.where('userID', '==', userID).get()\n  let data = {}\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data = {\n      \"displayName\": docData.displayName,\n  \t\t\"userID\": docData.userID,\n  \t\t\"avatarUrl\": docData.avatarUrl,\n  \t\t\"ahaMomentCount\": docData.ahaMomentCount,\n  \t\t\"explanationCount\": docData.explanationCount,\n  \t\t\"reactionsCount\": {\n  \t\t\t\"gotIt\": docData.reactionGotItCount,\n  \t\t\t\"laughing\": docData.reactionLaughingCount,\n  \t\t\t\"shocked\": docData.reactionShockedCount\n  \t\t}\n    }\n  })\n  return data\n}\n\nasync function getDocIDByUserID(userID) {\n  let snapshot = await usersRef.where('userID', '==', userID).get()\n  let userDocID = \"\"\n  await snapshot.forEach(doc => {\n    userDocID = doc.id\n  })\n  return userDocID\n}\n\nasync function incrementUserExplanationCount(userID) {\n  let docID = await getDocIDByUserID(userID)\n  let userRef = usersRef.doc(docID)\n\n  userRef.update({ explanationCount: increment })\n}\n\nasync function getFileURLFromFirebaseStorage(url) {\n  let downloadUrl = await storageRef.child(url).getDownloadURL()\n  return downloadUrl\n}\n\n// get and return various data\n\nasync function saveExplanationToDB(explanationObj) {\n  let newExplanation = {\n    \"concept\": explanationObj.concept,\n    \"authorUserID\": explanationObj.authorUserID,\n    \"authorDisplayName\": explanationObj.authorDisplayName,\n    \"authorAvatarUrl\": explanationObj.authorAvatarUrl,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": {\n      \"introText\": explanationObj.explanation.introText ? explanationObj.explanation.introText : \"\",\n      \"mediaConsumptionGuidance\": explanationObj.explanation.mediaConsumptionGuidance ? explanationObj.explanation.mediaConsumptionGuidance : \"\",\n      \"mediaLink\": explanationObj.explanation.mediaLink ? explanationObj.explanation.mediaLink : \"\",\n      \"type\": explanationObj.explanation.type\n    },\n    \"ahaMomentCount\": 0,\n    \"explanationCount\": 0,\n    \"reactionGotItCount\": 0,\n    \"reactionLaughingCount\": 0,\n    \"reactionShockedCount\": 0\n  }\n  explanationsRef.add(newExplanation)\n  incrementUserExplanationCount(explanationObj.authorUserID)\n}\n\nasync function saveExplanationWithFileToDB(introText, fileToUpload, fileType, userID, concept) { // will also want the user here\n  // first upload file to db\n  let fileName = generateFilePathAndName(fileType, userID, concept)\n  let snapshot = await storageRef.child(fileName).put(fileToUpload)\n  if (!snapshot.state == \"success\") {\n    console.log(\"error\");\n  }\n\n  // then need to save explanation to firestore\n\n  // first to do that, need some user profile data\n  let userObj = await getUserProfileInfoByUserID(userID)\n\n  // then save to firebase\n  await saveExplanationToDB({\n    \"concept\": concept,\n    \"authorUserID\": userID,\n    \"authorDisplayName\": userObj.displayName,\n    \"authorAvatarUrl\": userObj.avatarUrl,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": {\n      \"introText\": introText,\n      \"mediaLink\": snapshot.metadata.fullPath,\n      \"type\": fileType\n    },\n    \"ahaMomentCount\": 0,\n    \"explanationCount\": 0,\n    \"reactionGotItCount\": 0,\n    \"reactionLaughingCount\": 0,\n    \"reactionShockedCount\": 0\n  })\n}\n\nasync function saveWrittenExplanationToDB(text, userID, concept) {\n  // first remove any html or scripts because xss\n  let cleanText = text.replace('<script>','').replace('onclick', '').replace('onerror').replace('onResize', '').replace('onPropertyChange', '').replace('onMouseEnter', '').replace('onFocus', '') // https://gist.github.com/JohannesHoppe/5612274\n\n  // then save explanation to firestore\n\n  // first to do that, need some user profile data\n  let userObj = await getUserProfileInfoByUserID(userID)\n\n  // then save to firebase\n  await saveExplanationToDB({\n    \"concept\": concept,\n    \"authorUserID\": userID,\n    \"authorDisplayName\": userObj.displayName,\n    \"authorAvatarUrl\": userObj.avatarUrl,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": {\n      \"introText\": text,\n      \"type\": \"text\"\n    },\n    \"ahaMomentCount\": 0,\n    \"explanationCount\": 0,\n    \"reactionGotItCount\": 0,\n    \"reactionLaughingCount\": 0,\n    \"reactionShockedCount\": 0\n  })\n}\n\nasync function saveExternalLinkExplanationToDB(introText, mediaLink, mediaConsumptionGuidance, fileType, userID, concept) {\n  // first need some user profile data\n  let userObj = await getUserProfileInfoByUserID(userID)\n\n  // then save to firebase\n  await saveExplanationToDB({\n    \"concept\": concept,\n    \"authorUserID\": userID,\n    \"authorDisplayName\": userObj.displayName,\n    \"authorAvatarUrl\": userObj.avatarUrl,\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"explanation\": {\n      \"introText\": introText,\n      \"mediaLink\": mediaLink,\n      \"mediaConsumptionGuidance\": mediaConsumptionGuidance,\n      \"type\": fileType\n    },\n    \"ahaMomentCount\": 0,\n    \"explanationCount\": 0,\n    \"reactionGotItCount\": 0,\n    \"reactionLaughingCount\": 0,\n    \"reactionShockedCount\": 0\n  })\n}\n\n// returns 2 concepts for the front page that need love as an obj\nasync function getConceptsThatNeedLove() {\n  return {\n    \"totalAmountOfConceptsNeedingLove\": 43,\n    \"conceptsNeedingLoveToDisplay\": [\n\t\t{\n\t\t\t\"conceptName\": \"Derivative\",\n\t\t\t\"numContributors\": 11,\n\t\t\t\"contributorAvatars\": [\"/images/temp-avatar.jpg\", \"/images/temp-avatar2.jpg\", \"/images/temp-avatar3.jpg\", \"/images/temp-avatar4.jpg\"]\n\t\t},\n    {\n\t\t\t\"conceptName\": \"Infinity\",\n\t\t\t\"numContributors\": 4,\n\t\t\t\"contributorAvatars\": [\"/images/temp-avatar.jpg\", \"/images/temp-avatar2.jpg\", \"/images/temp-avatar3.jpg\", \"/images/temp-avatar4.jpg\"]\n\t\t}]\n  }\n}\n\n// returns top 5 creators in an array\nasync function getTopCreatorsAllTime() {\n  let snapshot = await usersRef.orderBy('ahaMomentCount', 'desc').get()\n  let data = []\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"displayName\": docData.displayName,\n      \"userID\": docData.userID,\n      \"avatarUrl\": docData.avatarUrl,\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"explanationCount\": docData.explanationCount,\n      \"reactions\": {\n        \"gotItCount\": docData.reactionGotItCount,\n        \"laughingCount\": docData.reactionLaughingCount,\n        \"shockedCount\": docData.reactionShockedCount\n      }\n    })\n  })\n  return data\n}\n\n// returns array of top 5 explanations\nasync function getTopExplanationsAllTime() {\n  let snapshot = await explanationsRef.orderBy('ahaMomentCount', 'desc').get()\n  let data = []\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"explanationID\": doc.id,\n      \"concept\": docData.concept,\n      \"authorUserID\": docData.authorUserID,\n      \"authorAvatarUrl\": docData.authorAvatarUrl,\n      \"authorDisplayName\": docData.authorDisplayName,\n      \"explanation\": {\n        \"type\": docData.explanation.type,\n        \"introText\": docData.explanation.introText,\n        \"mediaLink\": docData.explanation.mediaLink,\n        \"mediaConsumptionGuidance\": docData.explanation.mediaConsumptionGuidance\n      },\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"totalScore\": docData.totalScore,\n      \"reactions\": {\n        \"gotItCount\": docData.reactionGotItCount,\n        \"laughingCount\": docData.reactionLaughingCount,\n        \"shockedCount\": docData.reactionShockedCount\n      }\n    })\n  })\n  return data\n}\n\n  async function getTopConceptsAllTime() {\n  return [\n    {\n    \t\"conceptName\": \"Integrals\", // these need to be transformed into - instead of space\n    \t\"explanationCount\": 10,\n      \"ahaMomentCount\": 20\n    },\n    {\n    \t\"conceptName\": \"Derivatives\", // these need to be transformed into - instead of space\n    \t\"explanationCount\": 10,\n      \"ahaMomentCount\": 20\n    },\n    {\n    \t\"conceptName\": \"Limits\", // these need to be transformed into - instead of space\n    \t\"explanationCount\": 10,\n      \"ahaMomentCount\": 20\n    },\n    {\n    \t\"conceptName\": \"Infinity\", // these need to be transformed into - instead of space\n    \t\"explanationCount\": 10,\n      \"ahaMomentCount\": 20\n    },\n    {\n    \t\"conceptName\": \"Logarithm\", // these need to be transformed into - instead of space\n    \t\"explanationCount\": 10,\n      \"ahaMomentCount\": 20\n    }\n  ]\n  }\n\n  // returns array of explanations for a concept sorted in rank order\n  async function getConceptExplanations(concept) {\n  let formattedConcept = concept.toLowerCase()\n  let snapshot = await explanationsRef.where('concept', '==', formattedConcept).orderBy('ahaMomentCount', 'desc').get()\n  let data = []\n  await snapshot.forEach(doc => {\n    let docData = doc.data()\n    data.push({\n      \"explanationID\": doc.id,\n      \"concept\": docData.concept,\n      \"authorUserID\": docData.authorUserID,\n      \"authorAvatarUrl\": docData.authorAvatarUrl,\n      \"authorDisplayName\": docData.authorDisplayName,\n      \"explanation\": {\n        \"type\": docData.explanation.type,\n        \"introText\": docData.explanation.introText,\n        \"mediaLink\": docData.explanation.mediaLink,\n        \"mediaConsumptionGuidance\": docData.explanation.mediaConsumptionGuidance\n      },\n      \"ahaMomentCount\": docData.ahaMomentCount,\n      \"totalScore\": docData.totalScore,\n      \"reactions\": {\n        \"gotItCount\": docData.reactionGotItCount,\n        \"laughingCount\": docData.reactionLaughingCount,\n        \"shockedCount\": docData.reactionShockedCount\n      }\n    })\n  })\n  return data\n}\n\n// voting utils\n\nasync function addAhaToDB(explanationID, loggedInUserID, authorUserID) {\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  // increment aha count for explanation\n  explanationRef.update({ ahaMomentCount: increment })\n\n  // increment aha count for author of explanation\n  let docID = await getDocIDByUserID(loggedInUserID)\n  let userRef = usersRef.doc(docID)\n  userRef.update({ ahaMomentCount: increment })\n\n  // add vote to explanation vote log\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"userID\": loggedInUserID,\n    \"type\": \"ahaMoment\"\n  }\n\n  explanationRef.update({\n     voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n   })\n}\n\nasync function addDontGetItToDB(explanationID, loggedInUserID, authorUserID) {\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  // increment aha count for explanation\n  explanationRef.update({ dontGetItCount: increment })\n\n  // increment aha count for author of explanation\n  let docID = await getDocIDByUserID(loggedInUserID)\n  let userRef = usersRef.doc(docID)\n  userRef.update({ dontGetItCount: increment })\n\n  // add vote to explanation vote log\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"userID\": loggedInUserID,\n    \"type\": \"dontGetIt\"\n  }\n\n  explanationRef.update({\n     voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n   })\n}\n\nasync function addReactionGotItToDB(explanationID, loggedInUserID, authorUserID) {\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  // increment aha count for explanation\n  explanationRef.update({ reactionGotItCount: increment })\n\n  // increment aha count for author of explanation\n  let docID = await getDocIDByUserID(loggedInUserID)\n  let userRef = usersRef.doc(docID)\n  userRef.update({ reactionGotItCount: increment })\n\n  // add vote to explanation vote log\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"userID\": loggedInUserID,\n    \"type\": \"reactionGotIt\"\n  }\n\n  explanationRef.update({\n     voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n   })\n}\n\nasync function addReactionLaughingToDB(explanationID, loggedInUserID, authorUserID) {\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  // increment aha count for explanation\n  explanationRef.update({ reactionLaughingCount: increment })\n\n  // increment aha count for author of explanation\n  let docID = await getDocIDByUserID(loggedInUserID)\n  let userRef = usersRef.doc(docID)\n  userRef.update({ reactionLaughingCount: increment })\n\n  // add vote to explanation vote log\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"userID\": loggedInUserID,\n    \"type\": \"reactionLaughing\"\n  }\n\n  explanationRef.update({\n     voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n   })\n}\n\nasync function addReactionShockedToDB(explanationID, loggedInUserID, authorUserID) {\n  let explanationRef = explanationsRef.doc(explanationID)\n\n  // increment aha count for explanation\n  explanationRef.update({ reactionShockedCount: increment })\n\n  // increment aha count for author of explanation\n  let docID = await getDocIDByUserID(loggedInUserID)\n  let userRef = usersRef.doc(docID)\n  userRef.update({ reactionShockedCount: increment })\n\n  // add vote to explanation vote log\n  let newVote = {\n    \"datetime\": firebase.firestore.Timestamp.now(),\n    \"userID\": loggedInUserID,\n    \"type\": \"reactionShocked\"\n  }\n\n  explanationRef.update({\n     voteLog: firebase.firestore.FieldValue.arrayUnion(newVote)\n   })\n}\n\nmodule.exports = {\n  firebase,\n  logUserIn,\n  saveUserToDB,\n  getLoggedInUser,\n  getUserByID,\n  saveExplanationWithFileToDB,\n  saveWrittenExplanationToDB,\n  saveExternalLinkExplanationToDB,\n  getFileURLFromFirebaseStorage,\n  getTopConceptsAllTime,\n  getTopCreatorsAllTime,\n  getTopExplanationsAllTime,\n  getConceptsThatNeedLove,\n  getConceptExplanations,\n  addAhaToDB,\n  addDontGetItToDB,\n  addReactionGotItToDB,\n  addReactionLaughingToDB,\n  addReactionShockedToDB\n}\n"]},"metadata":{},"sourceType":"script"}