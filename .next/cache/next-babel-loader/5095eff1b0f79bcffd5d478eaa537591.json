{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\n/*\n  This file contains firebase config and instantiation\n  contains functions that interact with the db\n\n  This file also holds all of the auth functions\n  logUserIn\n  getLoggedInUser <-- returns false if no user logged in\n*/\n// initialize\nvar firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n};\nconsole.log(firebaseConfig.apiKey);\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar db = firebase.firestore();\nvar conceptsRef = db.collection('concepts');\nvar explanationsRef = db.collection('explanations');\nvar usersRef = db.collection('users');\nvar increment = firebase.firestore.FieldValue.increment(1);\nvar decrement = firebase.firestore.FieldValue.increment(-1);\nvar provider = new firebase.auth.TwitterAuthProvider(); // auth\n\nfunction getLoggedInUser() {\n  return _getLoggedInUser.apply(this, arguments);\n}\n\nfunction _getLoggedInUser() {\n  _getLoggedInUser = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee() {\n    var user;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            user = firebase.auth().currentUser;\n\n            if (user) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 3:\n            return _context.abrupt(\"return\", user);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getLoggedInUser.apply(this, arguments);\n}\n\nfunction logUserIn() {\n  return _logUserIn.apply(this, arguments);\n}\n\nfunction _logUserIn() {\n  _logUserIn = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee2() {\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            firebase.auth().signInWithPopup(provider).then(function (result) {\n              // This gives you a the Twitter OAuth 1.0 Access Token and Secret.\n              // You can use these server side with your app's credentials to access the Twitter API.\n              var token = result.credential.accessToken;\n              var secret = result.credential.secret; // The signed-in user info.\n\n              var user = result.user; // can use the getLoggedInUser function to return a good user obj\n              // user.photoURL, user.displayName, user.email, user.uid does not return twitter handle\n\n              console.log(user);\n              return user;\n            })[\"catch\"](function (error) {\n              // Handle Errors here.\n              var errorCode = error.code;\n              var errorMessage = error.message; // The email of the user's account used.\n\n              var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n              var credential = error.credential;\n              console.log(error);\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _logUserIn.apply(this, arguments);\n}\n\nfunction pollAuth() {\n  return _pollAuth.apply(this, arguments);\n}\n\nfunction _pollAuth() {\n  _pollAuth = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee3() {\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            firebase.auth().onAuthStateChanged(function (user) {\n              if (user) {\n                // User is signed in.\n                var displayName = user.displayName;\n                var email = user.email;\n                var emailVerified = user.emailVerified;\n                var photoURL = user.photoURL;\n                var isAnonymous = user.isAnonymous;\n                var uid = user.uid;\n                var providerData = user.providerData; // ...\n              } else {// User is signed out.\n                  // ...\n                }\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _pollAuth.apply(this, arguments);\n}\n\nmodule.exports = {\n  logUserIn: logUserIn,\n  getLoggedInUser: getLoggedInUser\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/ahamoments/utils/firebase.js"],"names":["firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","console","log","firebase","apps","length","initializeApp","db","firestore","conceptsRef","collection","explanationsRef","usersRef","increment","FieldValue","decrement","provider","auth","TwitterAuthProvider","getLoggedInUser","user","currentUser","logUserIn","signInWithPopup","then","result","token","credential","accessToken","secret","error","errorCode","code","errorMessage","message","email","pollAuth","onAuthStateChanged","displayName","emailVerified","photoURL","isAnonymous","uid","providerData","module","exports"],"mappings":"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","sourcesContent":["/*\n  This file contains firebase config and instantiation\n  contains functions that interact with the db\n\n  This file also holds all of the auth functions\n  logUserIn\n  getLoggedInUser <-- returns false if no user logged in\n*/\n\nimport * as firebase from 'firebase';\n\n// initialize\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: \"explain-this.firebaseapp.com\",\n  databaseURL: \"https://explain-this.firebaseio.com\",\n  projectId: \"explain-this\",\n  storageBucket: \"explain-this.appspot.com\",\n  messagingSenderId: \"145315125752\",\n  appId: \"1:145315125752:web:4e7c3fe717a051b0471e0d\",\n  measurementId: \"G-2HP7D44T1F\"\n}\n\nconsole.log(firebaseConfig.apiKey);\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst db = firebase.firestore();\nconst conceptsRef = db.collection('concepts');\nconst explanationsRef = db.collection('explanations')\nconst usersRef = db.collection('users')\n\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst decrement = firebase.firestore.FieldValue.increment(-1);\n\nconst provider = new firebase.auth.TwitterAuthProvider();\n\n// auth\n\nasync function getLoggedInUser() {\n  let user = firebase.auth().currentUser\n\n  if (!user) {\n  // No user is signed in.\n    return false;\n  }\n\n  // maybe pull some stuff about the user into an obj and return that?\n  // user.photoURL, user.displayName\n\n  return user\n}\n\nasync function logUserIn() {\n  firebase.auth().signInWithPopup(provider).then(function(result) {\n    // This gives you a the Twitter OAuth 1.0 Access Token and Secret.\n    // You can use these server side with your app's credentials to access the Twitter API.\n    let token = result.credential.accessToken;\n    let secret = result.credential.secret;\n    // The signed-in user info.\n    let user = result.user;\n    // can use the getLoggedInUser function to return a good user obj\n\n    // user.photoURL, user.displayName, user.email, user.uid does not return twitter handle\n    console.log(user);\n    return user\n  }).catch(function(error) {\n    // Handle Errors here.\n    let errorCode = error.code;\n    let errorMessage = error.message;\n    // The email of the user's account used.\n    let email = error.email;\n    // The firebase.auth.AuthCredential type that was used.\n    let credential = error.credential;\n    console.log(error);\n  });\n}\n\nasync function pollAuth() {\n  firebase.auth().onAuthStateChanged(function(user) {\n    if (user) {\n      // User is signed in.\n      var displayName = user.displayName;\n      var email = user.email;\n      var emailVerified = user.emailVerified;\n      var photoURL = user.photoURL;\n      var isAnonymous = user.isAnonymous;\n      var uid = user.uid;\n      var providerData = user.providerData;\n      // ...\n    } else {\n      // User is signed out.\n      // ...\n    }\n  });\n}\n\nmodule.exports = { logUserIn, getLoggedInUser }\n"]},"metadata":{},"sourceType":"script"}