{"ast":null,"code":"const conceptToDisplayName = concept => {\n  // replace - with space\n  return concept.replace(\"-\", \" \");\n}; //audio, photo, video, youtube, tweet, text, link\n\n\nconst explanationTypeToDisplayType = explanationType => {\n  switch (explanationType) {\n    case \"audio\":\n      return \"spoken word\";\n      break;\n\n    case \"photo\":\n      return \"illustration\";\n      break;\n\n    case \"video\":\n      return \"monologue\";\n      break;\n\n    case \"youtube\":\n      return \"poetry\";\n      break;\n\n    case \"tweet\":\n      return \"280 characters\";\n      break;\n\n    case \"text\":\n      return \"biography\";\n      break;\n\n    default:\n      return \"interpretive dance\";\n  }\n};\n\nconst generateFilePathAndName = (fileType, userID, concept) => {\n  let randomID = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  return `/${concept}/${fileType}/${userID}/${randomID}`;\n};\n\nasync function getTwitterEmbed(tweetUrl) {\n  let twitterUser = tweetUrl.split('twitter.com/')[1].split('/')[0];\n  let twitterStatus = tweetUrl.split('status/')[1].split('?')[0];\n  let res = await fetch(`https://publish.twitter.com/oembed?url=${tweetUrl}`);\n  let json = await res.json();\n  console.log(json);\n  return json.html;\n}\n\nmodule.exports = {\n  conceptToDisplayName,\n  explanationTypeToDisplayType,\n  generateFilePathAndName,\n  getTwitterEmbed\n};","map":{"version":3,"sources":["/Users/danigrant/Projects/ahamoments/utils/utils.js"],"names":["conceptToDisplayName","concept","replace","explanationTypeToDisplayType","explanationType","generateFilePathAndName","fileType","userID","randomID","Math","random","toString","substring","getTwitterEmbed","tweetUrl","twitterUser","split","twitterStatus","res","fetch","json","console","log","html","module","exports"],"mappings":"AAAA,MAAMA,oBAAoB,GAAGC,OAAO,IAAI;AACtC;AACA,SAAOA,OAAO,CAACC,OAAR,CAAgB,GAAhB,EAAqB,GAArB,CAAP;AACD,CAHD,C,CAKA;;;AACA,MAAMC,4BAA4B,GAAGC,eAAe,IAAI;AACtD,UAAOA,eAAP;AACA,SAAK,OAAL;AACE,aAAO,aAAP;AACA;;AACF,SAAK,OAAL;AACE,aAAO,cAAP;AACA;;AACF,SAAK,OAAL;AACE,aAAO,WAAP;AACA;;AACF,SAAK,SAAL;AACE,aAAO,QAAP;AACA;;AACF,SAAK,OAAL;AACE,aAAO,gBAAP;AACA;;AACF,SAAK,MAAL;AACE,aAAO,WAAP;AACA;;AACF;AACE,aAAO,oBAAP;AApBF;AAsBD,CAvBD;;AAyBA,MAAMC,uBAAuB,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBN,OAAnB,KAA+B;AAC7D,MAAIO,QAAQ,GAAGC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwC,EAAxC,IAA8CH,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwC,EAAxC,CAA7D;AACA,SAAQ,IAAGX,OAAQ,IAAGK,QAAS,IAAGC,MAAO,IAAGC,QAAS,EAArD;AACD,CAHD;;AAKA,eAAeK,eAAf,CAA+BC,QAA/B,EAAyC;AACvC,MAAIC,WAAW,GAAGD,QAAQ,CAACE,KAAT,CAAe,cAAf,EAA+B,CAA/B,EAAkCA,KAAlC,CAAwC,GAAxC,EAA6C,CAA7C,CAAlB;AACA,MAAIC,aAAa,GAAGH,QAAQ,CAACE,KAAT,CAAe,SAAf,EAA0B,CAA1B,EAA6BA,KAA7B,CAAmC,GAAnC,EAAwC,CAAxC,CAApB;AACA,MAAIE,GAAG,GAAG,MAAMC,KAAK,CAAE,0CAAyCL,QAAS,EAApD,CAArB;AACA,MAAIM,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAOA,IAAI,CAACG,IAAZ;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,oBADe;AAEfG,EAAAA,4BAFe;AAGfE,EAAAA,uBAHe;AAIfQ,EAAAA;AAJe,CAAjB","sourcesContent":["const conceptToDisplayName = concept => {\n  // replace - with space\n  return concept.replace(\"-\", \" \")\n}\n\n//audio, photo, video, youtube, tweet, text, link\nconst explanationTypeToDisplayType = explanationType => {\n  switch(explanationType) {\n  case \"audio\":\n    return \"spoken word\"\n    break;\n  case \"photo\":\n    return \"illustration\"\n    break;\n  case \"video\":\n    return \"monologue\"\n    break;\n  case \"youtube\":\n    return \"poetry\"\n    break;\n  case \"tweet\":\n    return \"280 characters\"\n    break;\n  case \"text\":\n    return \"biography\"\n    break;\n  default:\n    return \"interpretive dance\"\n  }\n}\n\nconst generateFilePathAndName = (fileType, userID, concept) => {\n  let randomID = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  return `/${concept}/${fileType}/${userID}/${randomID}`\n}\n\nasync function getTwitterEmbed(tweetUrl) {\n  let twitterUser = tweetUrl.split('twitter.com/')[1].split('/')[0]\n  let twitterStatus = tweetUrl.split('status/')[1].split('?')[0]\n  let res = await fetch(`https://publish.twitter.com/oembed?url=${tweetUrl}`)\n  let json = await res.json()\n  console.log(json);\n  return json.html\n}\n\nmodule.exports = {\n  conceptToDisplayName,\n  explanationTypeToDisplayType,\n  generateFilePathAndName,\n  getTwitterEmbed\n}\n"]},"metadata":{},"sourceType":"script"}