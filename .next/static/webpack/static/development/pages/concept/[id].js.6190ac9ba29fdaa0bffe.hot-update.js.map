{"version":3,"file":"static/webpack/static/development/pages/concept/[id].js.6190ac9ba29fdaa0bffe.hot-update.js","sources":["webpack:///./components/explanationMediaComponents/EmbeddedTweet.js","webpack:///./utils/utils.js"],"sourcesContent":["import React from 'react'\nimport Loading from '../Loading'\nimport { getTwitterEmbed } from '../../utils/utils'\n\nclass EmbeddedTweet extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      embedHTML: false\n    }\n  }\n  async componentDidMount() {\n    this.setState({\n      tweetUrl: await getTwitterEmbed(this.props.tweet)\n    })\n  }\n  render() {\n    if (!this.state.embedHTML) {\n      return <Loading />\n    }\n    return (\n      <div className=\"center\">\n        {this.state.embedHTML}\n      </div>\n    )\n  }\n}\n\nexport default EmbeddedTweet\n","const conceptToDisplayName = concept => {\n  // replace - with space\n  return concept.replace(\"-\", \" \")\n}\n\n//audio, photo, video, youtube, tweet, text, link\nconst explanationTypeToDisplayType = explanationType => {\n  switch(explanationType) {\n  case \"audio\":\n    return \"spoken word\"\n    break;\n  case \"photo\":\n    return \"illustration\"\n    break;\n  case \"video\":\n    return \"monologue\"\n    break;\n  case \"youtube\":\n    return \"poetry\"\n    break;\n  case \"tweet\":\n    return \"280 characters\"\n    break;\n  case \"text\":\n    return \"biography\"\n    break;\n  default:\n    return \"interpretive dance\"\n  }\n}\n\nconst generateFilePathAndName = (fileType, userID, concept) => {\n  let randomID = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  return `/${concept}/${fileType}/${userID}/${randomID}`\n}\n\nasync function getTwitterEmbed(tweetUrl) {\n  let res = await fetch(`https://publish.twitter.com/oembed?url=${url}`)\n  let json = await res.json()\n  return json.html\n}\n\nmodule.exports = {\n  conceptToDisplayName,\n  explanationTypeToDisplayType,\n  generateFilePathAndName,\n  getTwitterEmbed\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;;;;;;;;;AACA;;AACA;AACA;;;;AADA;;;AADA;AACA;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AArBA;AACA;AAuBA;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAMA;AACA;AACA;AACA;AACA;AAJA;;;;A","sourceRoot":""}